/*
This file is intended only to be used for unit tests of individual files, as
there must be a build.gradle file at the root of the project. For all other
tasks, see javaNeuralNetwork/build.gradle.
 */

plugins {
    id 'java'
}

group 'mvg.solo'
version '1.0.0'

allprojects {
    wrapper {
        gradleVersion = '8.7'
    }
}

repositories {
    mavenCentral()
}

test {
    enabled = true
    useJUnitPlatform()
}

sourceSets {
    main.java.srcDirs = ['javaNeuralNetwork/src/main/java']
    main.resources.srcDirs = ['javaNeuralNetwork/src/main/resources']
    test.java.srcDirs = ['javaNeuralNetwork/src/test/java']
}

ext.registerExample = {String label, String mainClass ->
    tasks.register(label, JavaExec) {
        dependsOn 'classes'
        main mainClass
        classpath sourceSets.main.runtimeClasspath
    }
}

// Example run configurations go here!
// First argument is a label for the task, second argument is the location of the main method
registerExample("runCircle", "examples.classification.circle.Circle")
registerExample("runDiagonals", "examples.classification.diagonals.Diagonals")
registerExample("runSineClassification", "examples.classification.sinusoidal.Sinusoidal")
registerExample("runSineRegression", "examples.regression.sinusoidal.Sinusoidal")
registerExample("runEvenOdd", "examples.classification.even_odd.EvenOdd")

//tasks.register('circleJar', Jar) {
//    // Define the name of the JAR file
//    archiveFileName = 'circleJar.jar'
//    // Define the contents of the JAR file (in this case, example source code)
//    from sourceSets.main.java.srcDirs
//
//     manifest {
//         attributes 'Main-Class': 'examples.classification.circle.Circle'
//     }
//}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    testImplementation 'org.mockito:mockito-core:5.11.0'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    implementation 'org.apache.commons:commons-csv:1.10.0'
    implementation 'org.knowm.xchart:xchart:3.8.7'
}